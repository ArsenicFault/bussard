-- -*- lua -*-

define_mode("console")
ship.modes.console.parent = ship.modes.edit -- most keys work like in edit mode
ship.modes.console.textinput = ship.modes.edit.textinput
ship.modes.console.wrap = function(fn, ...) -- enforce read-only prompt!
   local pre_mode = ship.editor.current_mode_name()
   ship.editor.wrap(fn, ...)
   local prompt = ship.editor.prompt()
   if(ship.editor.is_dirty() and pre_mode == ship.editor.current_mode_name() and
      string.sub(ship.editor.get_line(0), 1, string.len(prompt)) ~= prompt) then
      ship.editor.undo()
   end
end

local beginning_of_line = function()
   ship.editor.beginning_of_line()
   if(ship.editor.get_line_number() == ship.editor.get_max_lines()) then
      for i=1,string.len(ship.editor.prompt()) do
         ship.editor.forward_char()
      end
   end
end

bind("console", "ctrl-a", beginning_of_line)
bind("console", "home", beginning_of_line)

bind("console", "return", function()
        local input = string.sub(ship.editor.get_line(0),
                                 string.len(ship.editor.prompt())+1)
        print(ship.editor.get_line(0))
        ship.editor.suppress_read_only(function()
              ship.editor.end_of_buffer()
              ship.editor.beginning_of_line()
              ship.editor.kill_line()
              ship.editor.insert({ship.editor.prompt()})
              ship.editor.end_of_line()
        end)

        local chunk, err = loadstring("return " .. input)
        if(err and not chunk) then
           chunk, err = loadstring(input)
           if(not chunk) then
              print("! Compilation error: " .. err or "Unknown error")
              return false
           end
        end

        local trace
        local result = pack(xpcall(chunk, function(e)
                                      trace = debug.traceback()
                                      err = e end))
        if(result[1]) then
           local results, i = lume.serialize(result[2], true), 3
           if result[2] == ship.editor.invisible then return true end
           while i <= #result do
              results = results .. ', ' .. lume.serialize(result[i], true)
              i = i + 1
           end
           print(results)
           return true
        else
           print('! Evaluation error: ' .. err or "Unknown")
           local lines = lume.split(trace, "\n")
           for i,l in pairs(lines) do
              -- editor infrastructure wraps 8 levels of irrelevant gunk
              if(i < #lines - 8) then print(l) end
           end
        end

end)

-- TODO: port from old console
-- history
-- completion
-- comm system
-- mini 1-line console in flight mode

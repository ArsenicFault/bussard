-- This -*- lua -*- defines a console mode which is for entering Lua code
-- to run directly for experimentation.

define_mode("console", "edit") -- inherit bindings from edit

bind("console", "ctrl-a", editor.beginning_of_input)
bind("console", "home", editor.beginning_of_input)

bind("console", "alt-p", editor.history_prev)
bind("console", "alt-n", editor.history_next)
bind("console", "ctrl-up", editor.history_prev)
bind("console", "ctrl-down", editor.history_next)

local jump_to_error = function()
   local _, point_line = editor.point()
   local line = editor.get_line(point_line)
   -- Pattern matches "<spaces>[string "buffer-name"]:line-number"
   local buffer, line_num = line:match("%s*%[string \"([^\"]*)\"%]:(%d*)")
   if(buffer and ship:find(buffer)) then
      editor.open(ship, buffer)
      editor.go_to(tonumber(line_num))
      return true
   end
end

bind("console", "return", function()
        -- if you're not on the last line, enter just bumps you down.
        if(editor.get_line_number() ~= editor.get_max_line()) then
           if(not jump_to_error()) then
              editor.end_of_buffer()
           end
        end

        local input = editor.get_input()
        editor.history_push(input)
        editor.end_of_line()
        editor.newline()
        editor.no_mark()

        -- try to compile the input.
        local chunk, err = loadstring("return " .. input)
        if(err and not chunk) then -- maybe it's a statement, not an expression
           chunk, err = loadstring(input)
           if(not chunk) then
              print("! Compilation error: " .. err or "Unknown error")
              editor.print_prompt()
              editor.end_of_buffer()
              return false
           end
        end

        -- try runnig the compiled code in protected mode.
        local trace
        local result = pack(xpcall(chunk, function(e)
                                      trace = debug.traceback()
                                      err = e end))
        if(result[1]) then
           local output, i = pps(result[2]), 3
           if result[2] == editor.invisible then
              editor.print_prompt()
              return true
           end
           -- pretty-print out the values it returned.
           while i <= #result do
              output = output .. ', ' .. pps(result[i])
              i = i + 1
           end
           print(output)
        else
           -- display the error and stack trace.
           realprint('! Evaluation error: ' .. err or "Unknown")
           print('! Evaluation error: ' .. err or "Unknown")
           local lines = lume.split(trace, "\n")
           for i,l in pairs(lines) do
              -- editor infrastructure wraps 8 levels of irrelevant gunk
              if(i < #lines - 8) then realprint(l) print(l) end
           end
        end
        editor.print_prompt()
end)

-- auto-completion saves you typing!
local complete = function()
   local point, point_line = editor.point()
   -- only complete if you're on the last line (input area)
   if(point_line ~= editor.get_max_line()) then return end
   -- strip out the prompt.
   local line = utf8.sub(editor.get_line(0),
                         utf8.len(editor.get_prompt()) + 1, point)
   -- what's the expression being completed?
   local entered = lume.last(lume.array((line):gmatch("[._%a0-9]+"))) or ""
   -- only complete if something is entered
   if(#entered < 1) then return end
   local completions = utils.completions_for(entered, _G, ".")

   -- if there's only one completion candidate, insert it. otherwise insert the
   -- longest unambiguous substring and display a list of candidates.
   if(#completions == 1) then
      editor.textinput(utf8.sub(completions[1], #entered + 1))
   elseif(#completions > 0) then
      local common = utils.longest_common_prefix(completions)
      if(common == entered) then
         print(table.concat(completions, " "))
      else
         editor.textinput(utf8.sub(common, #entered + 1))
      end
   end
end

bind("console", "tab", complete)
bind("console", "ctrl-i", complete)

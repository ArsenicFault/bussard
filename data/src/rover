-- -*- lua -*-

local colors = {red={255, 10, 10}, green={10, 255, 10}, blue={10, 10, 255}}

local shift, scale, xo, yo = 0.9, 5, 0, 0

local draw_box = function(color, x, y, w, h)
   graphics.setColor(colors[color] or {255,255,255})
   graphics.rectangle("line", x, y, w, h)
   graphics.rectangle("line", x*shift, y*shift, w*shift, h*shift)
   for cx = 0,1 do
      for cy = 0,1 do
         graphics.line(x+cx*w, y+cy*h, (x+cx*w)*shift, (y+cy*h)*shift)
      end
   end
end

local rover_points = {0,-1, 1,-2, 3,2, 0,4, -3,2, -1,-2}

local draw = function()
   if(not ship.rover_state) then return end
   local state, x,y,w,h = ship.rover_state, unpack(ship.rover_state.rover)
   graphics.push()
   local ew, eh = ship.editor.get_wh()
   graphics.translate(ew/2+xo, eh/2+yo)
   graphics.print(string.format("x: %s y: %s", x,y), -ew/2+10, -eh/2+10)
   graphics.scale(scale, scale)
   for _,rect in ipairs(state.rects) do
      draw_box(rect.color, unpack(rect))
   end
   graphics.setColor(colors.red)
   graphics.rotate(state.r)
   graphics.scale(w/10, h/10)
   graphics.polygon("line", rover_points)
   graphics.pop()
end

local move = function(dx, dy)
   return function() xo, yo = xo + dx, yo + dy end
end

define_mode("rover", "flight", {draw=draw, full_draw=false, read_only=true})
bind("rover", "up", move(0, -10))
bind("rover", "down", move(0, 10))
bind("rover", "left", move(-10, 0))
bind("rover", "right", move(10, 0))

bind("rover", "ctrl-x 1", editor.split)
bind("rover", "ctrl-x 2", lume.fn(editor.split, "vertical"))
bind("rover", "ctrl-x 3", lume.fn(editor.split, "horizontal"))
bind("rover", "ctrl-x 4", lume.fn(editor.split, "triple"))
bind("rover", "ctrl-x o", editor.focus_next)

bind("rover", "escape", function() editor.change_buffer("*flight*") end)


(let (fail-conditions (lambda (power)
                        (cond (> (distance) (ship_status "portal_range"))
                              "Out of range."
                              (> 0 (- (ship_status "battery") power))
                              "Insufficient power."))
      activate (lambda ()
                 (set_beams 0)
                 (print "Portal opening.")
                 (portal_activate))
      fail (lambda (message)
             (print message)
             (set_beams nil)
             (print failure))
      init-time (time)
      looper (lambda (last-time looper)
               (sleep 0.1)
               (let (time-since (- (time) init-time)
                     power (* 0.02 (- (time) last-time))
                     failure (fail-conditions power))
                 ;; TODO: move fail checking to RPC'd functions
                 (if failure
                     (fail failure)
                   ;; using a lambda here since sandbox interferes with do macro
                   ((lambda ()
                      (draw_power power)
                      (set_beams time-since)
                      (if (> time-since (ship_status "portal_time"))
                          (activate)
                        (looper (time) looper))))))))
  (if (no_trip_clearance)
      (fail (no_trip_clearance))
    ((lambda ()
       (print "Cleared for portal; standby for activation...")
       (disconnect)
       (looper (time) looper)))))
